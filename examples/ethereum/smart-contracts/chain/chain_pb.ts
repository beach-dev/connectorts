// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file chain.proto (package chain, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * to convert addresses from bytes to hex address, https://github.com/ethereum/go-ethereum/blob/4b2ff1457ac28fb2894485194e0e344e84c2bcd7/common/types.go#L210
 *
 * @generated from message chain.Transaction
 */
export class Transaction extends Message<Transaction> {
  /**
   * @generated from field: google.protobuf.Timestamp ts = 1;
   */
  ts?: Timestamp;

  /**
   * @generated from field: bytes From = 2;
   */
  From = new Uint8Array(0);

  /**
   * @generated from field: string Hash = 3;
   */
  Hash = "";

  /**
   * @generated from field: double Size = 4;
   */
  Size = 0;

  /**
   * @generated from field: uint64 AccountNonce = 5;
   */
  AccountNonce = protoInt64.zero;

  /**
   * @generated from field: uint64 Price = 6;
   */
  Price = protoInt64.zero;

  /**
   * @generated from field: uint64 GasLimit = 7;
   */
  GasLimit = protoInt64.zero;

  /**
   * @generated from field: bytes Recipient = 8;
   */
  Recipient = new Uint8Array(0);

  /**
   * @generated from field: bytes Amount = 9;
   */
  Amount = new Uint8Array(0);

  /**
   * @generated from field: bytes Payload = 10;
   */
  Payload = new Uint8Array(0);

  /**
   * @generated from field: uint64 V = 11;
   */
  V = protoInt64.zero;

  /**
   * @generated from field: bytes R = 12;
   */
  R = new Uint8Array(0);

  /**
   * @generated from field: bytes S = 13;
   */
  S = new Uint8Array(0);

  constructor(data?: PartialMessage<Transaction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "chain.Transaction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ts", kind: "message", T: Timestamp },
    { no: 2, name: "From", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "Hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "Size", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "AccountNonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "Price", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "GasLimit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "Recipient", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 9, name: "Amount", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 10, name: "Payload", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 11, name: "V", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "R", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 13, name: "S", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Transaction {
    return new Transaction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Transaction {
    return new Transaction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Transaction {
    return new Transaction().fromJsonString(jsonString, options);
  }

  static equals(a: Transaction | PlainMessage<Transaction> | undefined, b: Transaction | PlainMessage<Transaction> | undefined): boolean {
    return proto3.util.equals(Transaction, a, b);
  }
}

/**
 * @generated from message chain.Block
 */
export class Block extends Message<Block> {
  /**
   * @generated from field: google.protobuf.Timestamp ts = 1;
   */
  ts?: Timestamp;

  /**
   * @generated from field: string Hash = 2;
   */
  Hash = "";

  /**
   * @generated from field: uint64 Difficulty = 3;
   */
  Difficulty = protoInt64.zero;

  /**
   * @generated from field: uint64 Number = 4;
   */
  Number = protoInt64.zero;

  /**
   * @generated from field: uint64 GasLimit = 5;
   */
  GasLimit = protoInt64.zero;

  /**
   * @generated from field: uint64 GasUsed = 6;
   */
  GasUsed = protoInt64.zero;

  /**
   * @generated from field: uint64 Nonce = 7;
   */
  Nonce = protoInt64.zero;

  constructor(data?: PartialMessage<Block>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "chain.Block";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ts", kind: "message", T: Timestamp },
    { no: 2, name: "Hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "Difficulty", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "Number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "GasLimit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "GasUsed", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "Nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Block {
    return new Block().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Block {
    return new Block().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Block {
    return new Block().fromJsonString(jsonString, options);
  }

  static equals(a: Block | PlainMessage<Block> | undefined, b: Block | PlainMessage<Block> | undefined): boolean {
    return proto3.util.equals(Block, a, b);
  }
}

